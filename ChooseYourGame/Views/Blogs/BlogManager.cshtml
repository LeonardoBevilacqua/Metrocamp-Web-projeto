@model Blog
@{ ViewBag.title = "Crie sua Publicação"; }

<div class="uk-container uk-padding">
    <!-- Create a tag that we will use as the editable area. -->
    <!-- You can use a div tag as well. -->
    <!-- cyg.com/blogs/BlogManager POST -->
    <form asp-action="BlogManager" method="post" class="uk-form-stacked">
        <!-- <input type="hidden" asp-for="ProfileId" /> -->
        <div asp-validation-summary="All"></div>
        
        <div class="uk-margin">
            <label class="uk-form-label" asp-for="Title">Título</label>
            <input type="text" class="uk-input" asp-for="Title">
        </div>
        
        <div class="uk-margin">
            <label class="uk-form-label" asp-for="Description">Assunto do blog</label>
            <textarea class="uk-textarea" asp-for="Description"></textarea>
        </div>

        <div class="uk-margin">
            <label class="uk-form-label">Tags do blog</label>
            @foreach (var tag in ViewBag.Tags)
            {
                <label><input class="uk-checkbox" type="checkbox" 
                name='CheckBoxTags' 
                value="@tag.Id" 
                checked="@tag.IsSelected"> 
                    @tag.Description
                </label>
            
            }
        </div>

        <div class="uk-margin">
            <label class="uk-form-label" asp-for="BlogText">Blog</label>
            <textarea asp-for="BlogText"></textarea>
        </div>
        <button class="uk-button uk-button-primary" id="enviar" type="submit">enviar</button>
    </form>
</div>
@section Scripts {
<script src="~/lib/tinymce/tinymce.min.js"></script>
<script src="~/lib/tinymce/langs/pt_BR.js"></script>
<script>
    tinymce.init({
        selector: '#BlogText',
        language: 'pt_BR',
        plugins: [
            "advlist autolink autosave link image lists charmap preview hr anchor pagebreak",
            "searchreplace wordcount visualblocks visualchars code insertdatetime media nonbreaking",
            " contextmenu directionality emoticons textcolor paste textcolor colorpicker textpattern"
        ],
        toolbar1: "bold italic underline strikethrough | alignleft aligncenter alignright alignjustify | formatselect fontselect fontsizeselect",
        toolbar2: "cut copy paste | searchreplace | bullist numlist | outdent indent blockquote | undo redo | link unlink anchor image media code | insertdatetime preview | forecolor backcolor",
        toolbar3: "hr removeformat | subscript superscript | charmap emoticons | ltr rtl | visualchars visualblocks nonbreaking pagebreak restoredraft",
        content_css: [
            '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i',
            '//www.tinymce.com/css/codepen.min.css'
        ],
        menubar: false,
        toolbar_items_size: 'small',
        // enable title field in the Image dialog
        image_title: true,
        // enable automatic uploads of images represented by blob or data URIs
        automatic_uploads: true,
        // URL of our upload handler (for more details check: https://www.tinymce.com/docs/configure/file-image-upload/#images_upload_url)
        // images_upload_url: 'postAcceptor.php',
        // here we add custom filepicker only to Image dialog
        file_picker_types: 'image',
        // and here's our custom image picker
        file_picker_callback: function(cb, value, meta) {
            var input = document.createElement('input');
            input.setAttribute('type', 'file');
            input.setAttribute('accept', 'image/*');

            // Note: In modern browsers input[type="file"] is functional without 
            // even adding it to the DOM, but that might not be the case in some older
            // or quirky browsers like IE, so you might want to add it to the DOM
            // just in case, and visually hide it. And do not forget do remove it
            // once you do not need it anymore.

            input.onchange = function() {
                var file = this.files[0];

                var reader = new FileReader();
                reader.onload = function() {
                    // Note: Now we need to register the blob in TinyMCEs image blob
                    // registry. In the next release this part hopefully won't be
                    // necessary, as we are looking to handle it internally.
                    var id = 'blobid' + (new Date()).getTime();
                    var blobCache = tinymce.activeEditor.editorUpload.blobCache;
                    var base64 = reader.result.split(',')[1];
                    var blobInfo = blobCache.create(id, file, base64);
                    blobCache.add(blobInfo);

                    // call the callback and populate the Title field with the file name
                    cb(blobInfo.blobUri(), {
                        title: file.name
                    });
                };
                reader.readAsDataURL(file);
            };

            input.click();
        },
        video_template_callback: function(data) {
            return '<video width="' + data.width + '" height="' + data.height + '"' + (data.poster ? ' poster="' + data.poster + '"' : '') + ' controls="controls">\n' + '<source src="' + data.source1 + '"' + (data.source1mime ? ' type="' + data.source1mime + '"' : '') + ' />\n' + (data.source2 ? '<source src="' + data.source2 + '"' + (data.source2mime ? ' type="' + data.source2mime + '"' : '') + ' />\n' : '') + '</video>';
        }
    });

    /*$("#enviar").click(function() {
        var html = tinymce.get('BlogText').getContent();
        alert(html);
    });*/
</script>
}